[
{
	"uri": "//localhost:1313/vi/",
	"title": "Giám sát hiệu suất của ứng dụng với X-Ray và Custom Metrics",
	"tags": [],
	"description": "",
	"content": "Giám sát hiệu suất của ứng dụng với X-Ray và Custom Metrics Tổng quan Để một hệ thống vận hành tối ưu, dễ giám sát chúng ta cần những công cụ chuyên dụng để thực hiện điều đó. Bạn sẽ khám phá khả năng tuyệt vời của AWS thông qua X-Ray, Custom Metrics và nhiều hơn thế nữa.\nDưới đây là kiến trúc của dự án này\nNội dung Giới thiệu Triển khai theo dõi và phân tích Theo dõi hiệu năng với CloudWatch Custom Metrics Tạo bảng điều khiển và hệ thống cảnh báo Phân tích chi phí và đề xuất tối ưu Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/4-dashboardalarm/4.1-createdashboard/",
	"title": "Tạo bảng điều khiển",
	"tags": [],
	"description": "",
	"content": "Trong bước này chúng ta sẽ tiến hành tạo bảng điều khiển, từ đó quan sát các thông số quan trọng tại thời điểm tạo bảng.\nTruy cập vào giao diện của Cloud Watch Click chọn vào Dashboards Click chọn vào Create dashboard Giao diện Create new dashboards sẽ xuất hiện Nhập tên dashboards là ProcessingTime Click chọn vào Create dashboard Giao diện Add widget sẽ xuất hiện Phần Data source types chọn Cloudwatch Phần Data type chọn ** Metrics** Phần Widget type chọn Line Click chọn vào Next Hộp thoại Add metric graph sẽ xuất hiện Chọn service như hình Click chọn vào Create widget Sau khi tạo xong dashboard, truy cập lại trang quản lý dashboard và xem các dashboards đã tạo Vậy là chúng ta đã tạo và theo dõi các thông số qua dashboard, tiếp theo chúng ta sẽ đến với các bước tạo hệ thống cảnh báo.\n"
},
{
	"uri": "//localhost:1313/vi/2-implemetanalysis/2.1-createlambda/",
	"title": "Tạo Lambda Function có Tracing",
	"tags": [],
	"description": "",
	"content": "Trong bước này bạn sẽ tiến hành tạo một ứng dụng serverless có tracing, để theo dõi quá trình khi người dùng thực hiện truy vấn tới ứng dụng đó.\nTruy cập vào giao diện quản trị của AWS Lambda Console và click chọn vào Create a funtion Giao diện create function xuất hiện Click chọn Author from scratch Funtion name điền MonitorFuction Runtime click chọn vào phiên bản Node.js mới nhất Architecture click chọn vào x86_64 Kéo xuống thêm một đoạn Click chọn vào Create a new role with basic Lambda permission Click vào Create function Sau khi hoàn tất thao tác trước đó, function vừa tạo sẽ xuất hiện Click chọn vào mục Code: Paste đoạn code sau vào và ấn deploy export async function handler(event) { const start = Date.now(); await new Promise((r) =\u0026gt; setTimeout(r, Math.random() * 300 + 300)); const latency = Date.now() - start; console.log(\u0026#34;Request processed in:\u0026#34;, latency, \u0026#34;ms\u0026#34;); console.log(JSON.stringify({ \u0026#34;_aws\u0026#34;: { \u0026#34;Timestamp\u0026#34;: Date.now(), \u0026#34;CloudWatchMetrics\u0026#34;: [ { \u0026#34;Namespace\u0026#34;: \u0026#34;MyApp\u0026#34;, \u0026#34;Dimensions\u0026#34;: [[\u0026#34;Service\u0026#34;]], \u0026#34;Metrics\u0026#34;: [{ \u0026#34;Name\u0026#34;: \u0026#34;ProcessingTime\u0026#34;, \u0026#34;Unit\u0026#34;: \u0026#34;Milliseconds\u0026#34; }] } ] }, \u0026#34;Service\u0026#34;: \u0026#34;CheckoutService\u0026#34;, \u0026#34;ProcessingTime\u0026#34;: latency })); return { statusCode: 200, body: JSON.stringify({ message: \u0026#34;Hello! Tracing + metrics working.\u0026#34;, latency }) };\t} Click chọn vào mục Configuration và chọn vào Monitoring and operations tools Trong mục Monitoring and operations tools click chọn vào Edit Giao diện Edit monitoring tools sẽ xuất hiện, phần Lambda service traces click chọn vào Enable Kéo xuống cuối trang và click chọn vào Save Xuất hiện thông báo đã thay đổi thành công Quan sát Logs and metrics (default) hiện Enabled Quan sát Lambda service traces hiện Enabled Quay lại MonitorFuntion và click chọn vào Add trigger Giao diện add triggers sẽ xuất hiện Phần Intent click chọn vào Create a new API Phần API type click chọn vào HTTP API Phần Security click chọn vào Open Click chọn vào Add Xuất hiện thông báo và trigger đã được tạo thành công "
},
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Trong workshop này, bạn sẽ khám phá hai công cụ chính là X-Ray và Custom Metrics. Các bước để giám sát, tối ưu, tự động hoá và hệ thống cảnh báo.\nƯu điểm khi dùng AWS X-Ray \u0026amp; Custom Metrics:\n🎯 Theo dõi toàn bộ luồng xử lý request đầu–cuối qua các service 🔍 Phát hiện nhanh điểm nghẽn (bottleneck) và độ trễ bất thường 📊 Ghi chỉ số tùy chỉnh như ProcessingTime, ErrorType, UserAction 📈 Dễ dàng tạo dashboard giám sát thời gian thực với CloudWatch 🚨 Tích hợp cảnh báo (alarm) khi hiệu năng vượt ngưỡng 🤖 Hỗ trợ tối ưu tự động: tăng RAM, bật cache, gửi cảnh báo 💡 Không cần thay đổi nhiều source code, bật tracing rất nhanh 💰 Giúp tối ưu chi phí vận hành qua phân tích sử dụng tài nguyên Quy trình vận hành:\n🧭 Tình huống ⚙️ Hành động chính 🔔 Nhận cảnh báo CloudWatch Alarm Kiểm tra Alarm → Xem Logs bất thường → Dùng X-Ray để trace request chậm 🔍 Kiểm tra hiệu suất định kỳ Vào Dashboard → So sánh biểu đồ thời gian xử lý 🛠️ Latency tăng cao đột ngột Deploy lại Lambda → Kiểm tra memory/timeout → Giảm tải nếu cần 🧪 Debug lỗi cụ thể Dùng X-Ray → Tìm trace theo ID/thời gian → Phân tích breakdown 📈 Tối ưu lâu dài Ghi thêm metric vào EMF → Thiết lập thêm các Alarm nâng cao 🧹 Dọn dẹp định kỳ Xoá alarm/topic cũ → Kiểm tra chi phí Logs/X-Ray để tối ưu "
},
{
	"uri": "//localhost:1313/vi/2-implemetanalysis/2.2-awsxray/",
	"title": "Phân tích và kiểm tra bằng AWS X-Ray",
	"tags": [],
	"description": "",
	"content": "Phân tích và kiểm tra bằng AWS X-Ray Trong bước này chúng ta sẽ tiến hành phân tích kiểm tra ứng dụng serverless bằng AWS X-Ray. Từ các thông số quan trọng và đặc biệt là latency để đưa ra các giải pháp phù hợp làm tăng hiệu suất.\nTruy cập vào trigger vừa tạo và copy API endpoint Dùng postman test API endpoint vừa tạo (test khoảng 5 đến 7 lần) Truy cập vào trang quản lý trace map Quan sát biểu đồ gồm 3 thành phần chính: Client, Lambda Context và Lambda Function Click vào Lambda Function Xuất hiện các thông số của Lambda Funtion vừa chọn, gồm các lựa chọn về Metrics, Alerts, Response time distribution và click chọn vào Metrics Xem các thông số Latency (avg), Request, Faults Xem các biểu đồ Latency (avg), Request, Faults Click chọn vào mục Response time distribution, nhận thấy response time trung bình ở đây là 4% Click chọn vào View traces để xem chi tiết các traces Giao diện Traces xuất hiện, quan sát các traces và xem các thông số quan trọng Click chọn vào trace bất kì để xem chi tiết Quay lại giao diện traces và click chọn vào Refine query by Phần User annotations chọn vào aws:responseLatency. Đây là một thông số rất quan trọng quyết định request trung bình mất bao lâu để xử lý. Từ đó chúng ta sẽ đánh giá được hiệu năng của ứng dụng Bảng thông số các traces được sắp xếp theo chỉ số Latency giảm dần. Quan sát bảng này nhận thấy ứng dụng đang chạy có latency cao nhất là 312.446. Từ đó có thể chuẩn bị cho các trường hợp, quá tải của ứng dụng. Khi mà các traces dần có latency vượt ngưỡng Vậy là phần triển khai theo dõi và phân tích này đã kết thúc, phần sau chúng ta sẽ tới phần theo dõi hiệu năng với CloudWatch Custom Metrics.\n"
},
{
	"uri": "//localhost:1313/vi/4-dashboardalarm/4.2-createalarm/",
	"title": "Tạo hệ thống cảnh báo",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ thực hiện tạo hệ thống cảnh báo. Dịch vụ giúp chúng ta thực hiện Cloudwatch Alarm.\nTruy cập vào trang quản lý cloud watch Phần Alarms click chọn vào ** In alarm** Click chọn vào Create alarm Ở giao diện step 1, chúng ta chọn vào Select metrics Trong giao diện Select metric Chọn vào mục Browse Click chọn vào dịch vụ đã tạo trước đó Click chọn vào Select metric Sau khi chọn xong, metric đã chọn sẽ xuất hiện và bên cạnh đó là các thông số Chỉnh các thông số như hình bên dưới Kéo xuống them một đoạn Phần Threshold type click chọn vào Static Phần Whenever ProcessingTime is… click chọn vào Greater Phần than… điền vào 350 Phần Datapoints to alarm: điền từ 3 đến hết 3 Kéo xuống đoạn cuối, sau đó click chọn Next Giao diện Step 2 sẽ xuất hiện Phần Alarm state trigger chọn In alarm Phần Send a notification to the following SNS topic click chọn Create new topic Phần Create new topic… điền tên của topic Phần Email endpoints that will receive the notification… chọn email của bạn (nhớ xác thực khi AWS gửi mail) Click chọn vào Create topic Kéo xuống đoạn cuối và click chọn Next Giao diện Step 3 sẽ xuất hiện Phần Alarm name điền HighProcessingLatency Phần Edit điền mô tả là Alert when Lambda ProcessingTime \u0026gt; 350ms avg in 1 mins Click chọn Next Giao diện phần overview xuất hiện, xem lại các thông số đã tạo và click vào Create alarm Trang quản lý Alarms sẽ xuất hiện, click chọn vào alarm vừa tạo Xem chi tiết alarm, các thông số quan trọng Dùng postman test với một lượng request lớn Quay lại trang alarm và xem chi tiết alarm đã tạo Đợi mail cảnh báo hệ thống từ AWS Vậy là chúng ta đã hoàn thành tạo hệ thống cảnh báo, ở phần sau chúng ta sẽ đi tìm hiểu cách phân tích chi phí và tối ưu hệ thống.\n"
},
{
	"uri": "//localhost:1313/vi/2-implemetanalysis/",
	"title": "Triển khai theo dõi và phân tích",
	"tags": [],
	"description": "",
	"content": "Trong phần này, bạn sẽ tạo lambda function có tracing, tạo API Gateway Trigger Lambda và kiểm tra AWS X-Ray. Từ đó hiểu rõ hơn các thông số theo dõi từ X-Ray khi một ứng dụng serverless hoạt động.\nNội dung Tạo Lambda Function có Tracing Phân tích và kiểm tra bằng AWS X-Ray "
},
{
	"uri": "//localhost:1313/vi/3-custommetric/",
	"title": "Theo dõi hiệu năng với CloudWatch Custom Metrics",
	"tags": [],
	"description": "",
	"content": "Trong phần này chúng ta sẽ theo dõi hiệu năng của ứng dụng bằng CloudWatch Custom Metrics. Xem thông tin của custom metric và vẽ biểu đồ ProcessingTime dạng line,…\nTruy cập vào trang quản lý CloudWatch Phần Metrics Click chọn vào All metrics Sau đó click chọn vào MyApp Tiếp tục click chọn vào Service Tiếp tục click chọn vào CheckoutService và sau đó chọn Line Biểu đồ dạng line của custom metric sẽ xuất hiện. Ở đây chúng ta sẽ quan sát thấy sự lên xuống theo thời gian của processing time. Có thể tuỳ chỉnh theo các khoảng thời gian khác nhau. Từ đó xác định các vùng thời gian có thời gian xử lý chưa tối ưu và lên các phương án khắc phục. Chọn vào các biểu đồ khác, ví dụ ở đây là Stacked area\nNhư vậy là chúng ta đã kết thúc phần theo dõi hiệu năng với CloudWatch Custom Metrics. Từ các kiến thức phần này, phần nào đó sẽ giúp bạn có cái nhìn trực quan về Custom Metrics. Qua các thông số cũng như biểu đồ, giúp chúng ta thực hiện phần tiếp theo tốt hơn.\n"
},
{
	"uri": "//localhost:1313/vi/4-dashboardalarm/",
	"title": "Tạo bảng điều khiển và hệ thống cảnh báo",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta sẽ tiến hành cài đặt bảng điều khiển giám sát và tạo hệ thống cảnh báo khi có những bất thường từ metric.\nNội dung: Tạo bảng điều khiển Tạo hệ thống cảnh báo "
},
{
	"uri": "//localhost:1313/vi/5-optimization/",
	"title": "Phân tích chi phí và đề xuất tối ưu",
	"tags": [],
	"description": "",
	"content": "Phân tích chi phí Tổng quan các thành phần phát sinh chi phí Dịch vụ Tính phí theo Ước tính/tháng (ví dụ 100k requests) AWS Lambda Số request + thời gian chạy (GB-seconds) ~ $2–$5 AWS X-Ray Số trace segment (đo từng invoke) ~ $2.50 / 1 triệu trace segment CloudWatch Logs GB log lưu trữ + log event ingest ~ $0.50–$1 / GB CloudWatch Custom Metrics $0.30 / metric / tháng (sau 10 miễn phí) ~ $0.60 cho 2 metric CloudWatch Alarms $0.10 / alarm / tháng ~ $0.10–$0.50 SNS (email alert) Miễn phí với email (SMTP) $0 Phân tích cụ thể theo giải pháp bạn triển khai Thành phần Ghi chú Chi phí Lambda MonitorFunction Gọi 100,000 lần/tháng, thời gian trung bình 600ms, 128MB RAM ≈ $2.50 X-Ray Ghi trace mỗi lần invoke (100k trace segment) ≈ $2.50 CloudWatch Logs Log latency + custom metric EMF ≈ $1–$2 (tuỳ số lượng log/JSON size) Custom Metrics: ProcessingTime Ghi bằng EMF format → tính phí theo số lượng metric name ~$0.30–$0.60 Alarm CloudWatch + SNS 1 alarm, 1 email topic ~$0.10 Tổng ước tính / tháng ~ $6–$8.50 / tháng Giải pháp kiểm soát chi phí Vấn đề Cách tối ưu X-Ray tốn nhiều Chỉ bật tracing cho các Lambda quan trọng (sampling 10–20%) Logs quá nhiều Dùng Filter log level (ví dụ: chỉ log latency khi \u0026gt; 500ms) Custom Metric tốn phí Gộp nhiều metric vào 1 EMF log nếu được Logs lưu quá lâu Đặt Log Group Retention = 7 hoặc 14 ngày Truy vấn CloudWatch quá thường xuyên Tạo dashboard tổng hợp thay vì chạy truy vấn ad-hoc Lambda tốn GB-s quá nhiều Giảm timeout, RAM khi không cần thiết Dùng công cụ AWS để phân tích chi phí AWS Cost Explorer:\nLọc theo service: Lambda, CloudWatch, X-Ray Xem theo thời gian hoặc tài nguyên cụ thể AWS CloudWatch Billing Alerts:\nTạo alarm khi tổng chi phí vượt ngưỡng X-Ray + CloudWatch Metrics:\nPhân tích cụ thể request nào đang đắt (trace chậm → GB-seconds cao) Tag các Lambda:\nGắn tag theo cost-center, env để phân loại chi phí Dựa trên các công cụ phân tích như AWS Cost Explorer và các metric từ X-Ray và CloudWatch, hệ thống hiện tiêu tốn khoảng $6–$9/tháng cho 100,000 lượt truy cập. Chi phí tập trung chủ yếu vào Lambda execution, X-Ray tracing và CloudWatch logs/metrics. Các phương án tối ưu đã được đề xuất gồm điều chỉnh sampling, giảm log size, đặt retention log ngắn và gom metric hợp lý.\nĐề xuất tối ưu Quan sát từ X-Ray \u0026amp; CloudWatch Khuyến nghị tối ưu ⏱️ Latency trung bình \u0026gt; 600ms 🔁 Sử dụng cache để giảm thời gian xử lý — ví dụ: cache kết quả DB/API bằng Redis hoặc S3 🚀 Lambda có spikes ngẫu nhiên 800–1000ms 📦 Tăng memory (CPU tăng theo RAM) — nâng từ 128MB → 256MB hoặc 512MB để cải thiện tốc độ 📉 ProcessingTime dao động mạnh 🔄 Tách các tác vụ nặng sang async — ví dụ: ghi log, gửi mail → SNS hoặc SQS + Lambda 🔁 Lambda bị invoke nhiều lần lặp lại ⛔ Thêm throttle / deduplication ở phía gọi API 📊 Metric đều nhưng vẫn chậm ⚙️ Kiểm tra external dependency — API bên ngoài, RDS chậm, mạng delay\u0026hellip; trong trace 📉 Thời gian \u0026ldquo;Initialization\u0026rdquo; lâu 🛠️ Giảm cold start — giữ vùng nóng hoặc tránh khai báo biến lớn ở ngoài handler Có rất nhiều cách để tối ưu, một trong số cách rất hay là tối ưu khi gặp cảnh báo và chạy funtion để tăng tài nguyên của ứng dụng và từ đó giúp ứng dụng chạy tốt hơn.\n"
},
{
	"uri": "//localhost:1313/vi/6-cleanup/",
	"title": "Dọn dẹp tài nguyên  ",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ tiến hành các bước sau để xóa các tài nguyên chúng ta đã tạo trong bài thực hành này.\nXoá dịch vụ Lambda Truy cập giao diện quản trị dịch vụ lambda Chọn vào lambda cần xoá, click vào Actions và sau đó click chọn Delete Hộp thoại xác nhận sẽ xuất hiện, điền confirm và sau đó click chọn Delete Sau khi điền xong sẽ xuất hiện thông báo như hình bên dưới Xoá dashboard Truy cập vào trang quản lý dashboard của cloud watch, click chọn dashboard cần xoá, sau đó click Delete Hộp thoại xác nhận sẽ xuất hiện sau đó click chọn Delete Kết quả sau khi xoá xong Xoá Alarms Truy cập vào trang quản lý alarms của cloud watch Click chọn All alarm Chọn vào alarm cần xoá Chọn vào Actions, sau đó click chọn Delete Hộp thoại xác nhận xuất hiện, sau đó click vào Delete Xuất hiện thông báo đã xoá thành công Xoá Log Group Truy cập vào trang quản lý Log groups Click chọn vào log group cần xoá Click vào Actions, sau đó chọn Delete log group(s) Xuất hiện thông báo xác nhận, click vào Delete Sau khi xoá xong hiện thông báo như hình bên dưới "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]