[
{
	"uri": "//localhost:1313/4-dashboardalarm/4.1-createdashboard/",
	"title": "Create a Dashboard",
	"tags": [],
	"description": "",
	"content": "In this step, we will create a monitoring dashboard, allowing us to observe key metrics at the time of creation.\nGo to the CloudWatch Console Click on Dashboards Click on Create dashboard The Create new dashboard screen will appear: Enter the dashboard name: ProcessingTime Click Create dashboard The Add widget screen will appear: For Data source type, select CloudWatch For Data type, select Metrics For Widget type, choose Line Click Next The Add metric graph dialog will appear: Select your desired service as shown Click Create widget Once the dashboard is created, return to the dashboard management page to view the dashboards you\u0026rsquo;ve created: That‚Äôs it! You‚Äôve created a dashboard to monitor key metrics. Next, we‚Äôll move on to setting up an alert system.\n"
},
{
	"uri": "//localhost:1313/2-implemetanalysis/2.1-createlambda/",
	"title": "Create a Lambda Function with Tracing",
	"tags": [],
	"description": "",
	"content": "In this step, you will create a serverless application with tracing enabled to monitor the process when a user makes a request to the application.\nGo to the AWS Lambda Console and click Create a function The Create function interface appears: Select Author from scratch Enter MonitorFunction as the Function name For Runtime, choose the latest Node.js version For Architecture, select x86_64 Scroll down a bit further: Select Create a new role with basic Lambda permissions Click Create function Once done, the newly created function will appear: Click the Code tab Paste the following code and click Deploy export async function handler(event) { const start = Date.now(); await new Promise((r) =\u0026gt; setTimeout(r, Math.random() * 300 + 300)); const latency = Date.now() - start; console.log(\u0026#34;Request processed in:\u0026#34;, latency, \u0026#34;ms\u0026#34;); console.log(JSON.stringify({ \u0026#34;_aws\u0026#34;: { \u0026#34;Timestamp\u0026#34;: Date.now(), \u0026#34;CloudWatchMetrics\u0026#34;: [ { \u0026#34;Namespace\u0026#34;: \u0026#34;MyApp\u0026#34;, \u0026#34;Dimensions\u0026#34;: [[\u0026#34;Service\u0026#34;]], \u0026#34;Metrics\u0026#34;: [{ \u0026#34;Name\u0026#34;: \u0026#34;ProcessingTime\u0026#34;, \u0026#34;Unit\u0026#34;: \u0026#34;Milliseconds\u0026#34; }] } ] }, \u0026#34;Service\u0026#34;: \u0026#34;CheckoutService\u0026#34;, \u0026#34;ProcessingTime\u0026#34;: latency })); return { statusCode: 200, body: JSON.stringify({ message: \u0026#34;Hello! Tracing + metrics working.\u0026#34;, latency }) };\t} Click the Configuration tab and then go to Monitoring and operations tools In the Monitoring and operations tools section, click Edit The Edit monitoring tools interface appears. Under Lambda service traces, select Enable Scroll to the bottom of the page and click Save A success message will appear: Under Logs and metrics (default), you will see Enabled Under Lambda service traces, you will also see Enabled Go back to MonitorFunction and click Add trigger The Add trigger interface appears: For Intent, select Create a new API For API type, select HTTP API For Security, choose Open Click Add A confirmation will appear indicating the trigger was successfully created: "
},
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "In this workshop, you will explore two main tools: X-Ray and Custom Metrics. The steps include monitoring, optimization, automation, and alerting systems.\nAdvantages of using AWS X-Ray \u0026amp; Custom Metrics: üéØ Monitor the entire end-to-end request flow across services üîç Quickly detect bottlenecks and abnormal latencies üìä Record custom metrics such as ProcessingTime, ErrorType, UserAction üìà Easily create real-time monitoring dashboards using CloudWatch üö® Integrate alerts (alarms) when performance thresholds are breached ü§ñ Support automatic optimization: increase memory, enable caching, send alerts üí° Minimal source code changes needed ‚Äî tracing can be enabled quickly üí∞ Optimize operational costs through resource usage analysis Operation Workflow: üß≠ Scenario ‚öôÔ∏è Main Action üîî Receive CloudWatch Alarm Check the Alarm ‚Üí Review unusual Logs ‚Üí Use X-Ray to trace slow requests üîç Perform routine performance check Go to Dashboard ‚Üí Compare request processing time charts üõ†Ô∏è Sudden latency spike Redeploy Lambda ‚Üí Check memory/timeout ‚Üí Apply load reduction if needed üß™ Debug specific error Use X-Ray ‚Üí Find trace by ID/time ‚Üí Analyze breakdown üìà Long-term optimization Add more metrics to EMF ‚Üí Set up advanced alarms üßπ Periodic cleanup Remove old alarms/topics ‚Üí Review Logs/X-Ray cost for optimization "
},
{
	"uri": "//localhost:1313/",
	"title": "Monitoring Application Performance with X-Ray and Custom Metrics",
	"tags": [],
	"description": "",
	"content": "Monitoring Application Performance with X-Ray and Custom Metrics Overview To ensure a system operates efficiently and is easy to monitor, we need specialized tools to support that. You will explore the powerful capabilities of AWS through X-Ray, Custom Metrics, and more.\nBelow is the architecture of this project:\nContents Introduction Deploying Monitoring and Analysis Monitoring Performance with CloudWatch Custom Metrics Creating Dashboards and Alert Systems Cost Analysis and Optimization Suggestions Cleaning Up Resources "
},
{
	"uri": "//localhost:1313/2-implemetanalysis/2.2-awsxray/",
	"title": "Analyzing and Inspecting with AWS X-Ray",
	"tags": [],
	"description": "",
	"content": "Analyzing and Inspecting with AWS X-Ray In this step, we will analyze and inspect the serverless application using AWS X-Ray. From important metrics ‚Äî especially latency ‚Äî we can derive optimization strategies to improve performance.\nAccess the previously created trigger and copy the API endpoint: Use Postman to test the API endpoint (send about 5 to 7 requests): Go to the Trace Map Console Observe the diagram with 3 main components: Client, Lambda Context, and Lambda Function Click on Lambda Function The details of the selected Lambda Function will appear, including options for Metrics, Alerts, Response time distribution ‚Äî click on Metrics View metrics such as Latency (avg), Requests, Faults Check the graphs for Latency (avg), Requests, Faults Click on Response time distribution, and note that the average response time is around 4% Click View traces to see detailed trace data The Traces interface appears. Browse through the traces and review important metrics. Click on any trace to view the detailed breakdown: Return to the Traces interface and click Refine query by In the User annotations section, choose aws:responseLatency. This is a key metric showing how long a request takes to process. Based on this, you can evaluate the application‚Äôs performance. A table of traces will appear, sorted by descending latency. From this, you can see that the application has a peak latency of 312.446 ms, which helps prepare for potential overload situations ‚Äî when traces gradually exceed latency thresholds. That concludes the Monitoring and Analysis section. In the next part, we‚Äôll move on to monitoring performance with CloudWatch Custom Metrics.\n"
},
{
	"uri": "//localhost:1313/4-dashboardalarm/4.2-createalarm/",
	"title": "Create an Alert System",
	"tags": [],
	"description": "",
	"content": "In this step, we will create an alert system using CloudWatch Alarm, a service that helps us detect and notify when metrics exceed thresholds.\nGo to the CloudWatch Console Under the Alarms section, click on In alarm Then click Create alarm In Step 1, click Select metric In the Select metric interface: Choose Browse Click on the previously created service Then click Select metric After selection, your chosen metric will appear along with related details Configure the metric settings as shown: Scroll down a bit: For Threshold type, select Static Under Whenever ProcessingTime is\u0026hellip;, choose Greater Set the value to 350 For Datapoints to alarm, set both min and max to 3 Scroll to the bottom and click Next In Step 2 interface: Under Alarm state trigger, select In alarm Under Send a notification to the following SNS topic, choose Create new topic Name the new topic Enter your email under Email endpoints that will receive the notification (make sure to confirm when AWS sends the verification email) Click Create topic Scroll down and click Next In Step 3: Set Alarm name to HighProcessingLatency In Description, enter: Alert when Lambda ProcessingTime \u0026gt; 350ms avg in 1 min Click Next The Overview screen will appear. Review your settings and click Create alarm You will be redirected to the Alarms Management screen ‚Äî click on the alarm you just created Review the alarm details and important configuration metrics Use Postman to send a high volume of test requests Go back to the Alarms page and check the alarm status and metrics Wait for an alert email from AWS And that‚Äôs it ‚Äî we‚Äôve successfully created an alert system. In the next section, we‚Äôll explore cost analysis and system optimization.\n"
},
{
	"uri": "//localhost:1313/2-implemetanalysis/",
	"title": "Deploying Monitoring and Analysis",
	"tags": [],
	"description": "",
	"content": "In this section, you will create a Lambda function with tracing enabled, set up an API Gateway trigger for the Lambda, and inspect AWS X-Ray. This will help you better understand the monitoring metrics provided by X-Ray when a serverless application is running.\nContents Create a Lambda Function with Tracing Analyze and Inspect with AWS X-Ray "
},
{
	"uri": "//localhost:1313/3-custommetric/",
	"title": "Monitoring Performance with CloudWatch Custom Metrics",
	"tags": [],
	"description": "",
	"content": "In this section, we will monitor the application\u0026rsquo;s performance using CloudWatch Custom Metrics. You\u0026rsquo;ll view custom metric details and visualize the ProcessingTime as a line chart, among others.\nGo to the CloudWatch Console Under the Metrics section: Click on All metrics Then click on MyApp Next, click on Service Then select CheckoutService and choose the Line chart type The line chart of the custom metric will appear. Here, you can observe fluctuations in processing time over time. You can adjust the time range as needed. This helps identify periods where performance is suboptimal and allows you to prepare remediation strategies. You can also explore other chart types, such as the Stacked area chart:\nThat concludes the section on Monitoring Performance with CloudWatch Custom Metrics. The insights from this part should give you a clearer picture of how Custom Metrics work. Through the data and visualizations, you\u0026rsquo;ll be better equipped for the next steps.\n"
},
{
	"uri": "//localhost:1313/4-dashboardalarm/",
	"title": "Creating Dashboards and Alert Systems",
	"tags": [],
	"description": "",
	"content": "In this section, we will set up a monitoring dashboard and create an alerting system to notify you of anomalies based on metrics.\nContents: Create a Dashboard Set Up an Alert System "
},
{
	"uri": "//localhost:1313/5-optimization/",
	"title": "Cost Analysis and Optimization Recommendations",
	"tags": [],
	"description": "",
	"content": "Cost Analysis Overview of cost-generating components Service Billed by Estimated Monthly Cost (e.g., 100k requests) AWS Lambda Number of requests + execution time (GB-seconds) ~ $2‚Äì$5 AWS X-Ray Number of trace segments (measured per invoke) ~ $2.50 / 1 million trace segments CloudWatch Logs GB of stored logs + log event ingestion ~ $0.50‚Äì$1 / GB CloudWatch Custom Metrics $0.30 / metric / month (after first 10 free metrics) ~ $0.60 for 2 metrics CloudWatch Alarms $0.10 / alarm / month ~ $0.10‚Äì$0.50 SNS (email alerts) Free for email (SMTP) $0 Cost breakdown based on implemented solution Component Notes Cost Lambda MonitorFunction 100,000 invocations/month, avg duration 600ms, 128MB RAM ‚âà $2.50 X-Ray One trace per invoke (100k trace segments) ‚âà $2.50 CloudWatch Logs Logs for latency + EMF custom metrics ‚âà $1‚Äì$2 (depends on log volume / JSON size) Custom Metrics: ProcessingTime Written in EMF format ‚Üí billed per metric name ~$0.30‚Äì$0.60 Alarm CloudWatch + SNS One alarm, one email topic ~$0.10 Estimated total / month ~ $6‚Äì$8.50 / month Cost optimization strategies Issue Optimization Suggestion High X-Ray cost Enable tracing only for critical Lambdas (sampling rate 10‚Äì20%) Too many logs Use log level filters (e.g., log latency only if \u0026gt; 500ms) Expensive custom metrics Combine multiple metrics into one EMF log if possible Logs stored for too long Set Log Group Retention to 7 or 14 days Too many frequent CloudWatch queries Create summary dashboards instead of running ad-hoc queries High Lambda GB-seconds usage Reduce timeout or memory where unnecessary Use AWS tools to analyze cost AWS Cost Explorer\nFilter by service: Lambda, CloudWatch, X-Ray View by time or specific resources AWS CloudWatch Billing Alerts\nCreate alarms when total cost exceeds threshold X-Ray + CloudWatch Metrics\nAnalyze which specific requests are expensive (slow traces ‚Üí high GB-seconds) Lambda Tags\nTag functions by cost-center, env, etc., for better cost classification Based on tools like AWS Cost Explorer and metrics from X-Ray \u0026amp; CloudWatch, the system currently costs around $6‚Äì$9/month for 100,000 requests. Most costs come from Lambda execution, X-Ray tracing, and CloudWatch logs/metrics. Optimization measures include adjusting sampling rates, reducing log size, shortening log retention periods, and consolidating metrics.\nOptimization Recommendations Observation from X-Ray \u0026amp; CloudWatch Suggested Optimization ‚è±Ô∏è Average latency \u0026gt; 600ms üîÅ Use caching to reduce processing time ‚Äî e.g., cache DB/API results via Redis or S3 üöÄ Random latency spikes (800‚Äì1000ms) üì¶ Increase memory (CPU scales with RAM) ‚Äî try 256MB or 512MB instead of 128MB üìâ High ProcessingTime variability üîÑ Offload heavy tasks to async processing ‚Äî e.g., logging/email ‚Üí SNS or SQS + Lambda üîÅ Frequent repeated Lambda invocations ‚õî Add throttling or deduplication at the API caller side üìä Stable metrics but slow response ‚öôÔ∏è Investigate external dependencies (e.g., slow APIs, RDS, network latency\u0026hellip;) via traces üìâ Long \u0026ldquo;Initialization\u0026rdquo; time üõ†Ô∏è Reduce cold starts ‚Äî keep warm or avoid large global variables outside handler There are many ways to optimize your system. One highly effective method is to trigger automatic resource scaling upon alerts ‚Äî such as increasing memory when latency thresholds are breached, helping your app perform more reliably and efficiently.\n"
},
{
	"uri": "//localhost:1313/6-cleanup/",
	"title": "Clean Up Resources",
	"tags": [],
	"description": "",
	"content": "We will follow the steps below to delete the resources we created during this hands-on lab.\nüßπ Delete Lambda Function Go to the AWS Lambda Console Select the Lambda function to delete, click Actions, then select Delete A confirmation dialog will appear ‚Äî type confirm and click Delete Once confirmed, a success message will appear as shown: üìä Delete CloudWatch Dashboard Go to the CloudWatch Dashboard management page Select the dashboard to delete, then click Delete A confirmation dialog will appear ‚Äî click Delete The dashboard is successfully deleted: üö® Delete CloudWatch Alarms Go to the CloudWatch Alarms page Click on All alarms Select the alarm you want to delete Click Actions, then select Delete A confirmation dialog will appear ‚Äî click Delete A success message will be shown after deletion: üìù Delete Log Groups Go to the Log Groups management page Click the log group you want to delete Click Actions, then choose Delete log group(s) A confirmation dialog will appear ‚Äî click Delete A success message will be displayed after deletion: "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]